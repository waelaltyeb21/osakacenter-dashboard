"use client";
import React, { useState } from "react";
import { useDisclosure } from "@mantine/hooks";
import { Button, Input, Modal, Select, Table } from "@mantine/core";
import { RequestController } from "@/lib/RequestController";
import { IconUserEdit } from "@tabler/icons-react";

const UpdateStudentModal = ({ student: studentData, OnGroupDataUpdated }) => {
  const [opened, { open, close }] = useDisclosure();
  const [groups, setGroups] = useState([]);
  const [student, setStudent] = useState({
    name: "",
    phone: "",
    age: "",
    address: "",
    paymentStatus: "",
    group: "",
  });
  const GetStudent = async () => {
    try {
      const response = await RequestController(
        `/students/${studentData?.studentId}`
      );
      const groups = response?.data?.groups.map((group) => {
        return {
          label: `${group.course} - ${group.supervisor} - ${group.level} - ${group.time}`,
          value: group._id,
        };
      });
      setGroups(groups);
      if (response.status === 200) {
        console.log(response.data);
        open();
        setStudent({
          name: response?.data?.student?.name,
          phone: response?.data?.student?.phone,
          age: response?.data?.student?.age,
          address: response?.data?.student?.address,
          group: response?.data?.student?.groupId,
          paymentStatus: response?.data?.student?.paymentStatus,
        });
      }
    } catch (error) {
      throw new Error(error?.response?.message || error?.message);
    }
  };
  const HandleUpdateStudent = async (event) => {
    event.preventDefault();

    const req = await RequestController(
      `/students/update/${studentData._id}`,
      "PUT",
      student
    );
    if (req.status === 200) {
      console.log("Student Updated Successfully");
      OnGroupDataUpdated();
      close();
    }
  };
  return (
    <article>
      <Button onClick={GetStudent}>
        <IconUserEdit />
        <span>تحديث بيانات الطالب</span>
      </Button>

      <Modal
        opened={opened}
        onClose={close}
        size=""
        title="تحديث بيانات الطالب"
      >
        <form onSubmit={HandleUpdateStudent}>
          <Table
            striped
            withTableBorder
            withColumnBorders
            verticalSpacing="sm"
            className="w-full"
          >
            <Table.Thead>
              <Table.Tr>
                <Table.Th>الاسم كامل</Table.Th>
                <Table.Th>الهاتف</Table.Th>
                <Table.Th>العمر</Table.Th>
                <Table.Th>السكن</Table.Th>
                <Table.Th>القروب</Table.Th>
                <Table.Th>حالة الدفع</Table.Th>
              </Table.Tr>
            </Table.Thead>
            <Table.Tbody id="student-rows">
              <Table.Tr>
                <Table.Td>
                  <Input.Wrapper id="name">
                    <Input
                      required
                      type="text"
                      value={student?.name}
                      onChange={(event) =>
                        setStudent({ ...student, name: event.target.value })
                      }
                    />
                  </Input.Wrapper>
                </Table.Td>
                <Table.Td>
                  <Input.Wrapper id="phone">
                    <Input
                      required
                      minLength={9}
                      maxLength={12}
                      type="number"
                      value={student?.phone}
                      onChange={(event) =>
                        setStudent({ ...student, phone: event.target.value })
                      }
                    />
                  </Input.Wrapper>
                </Table.Td>
                <Table.Td>
                  <Input.Wrapper id="age">
                    <Input
                      required
                      type="number"
                      value={student?.age}
                      onChange={(event) =>
                        setStudent({ ...student, age: event.target.value })
                      }
                    />
                  </Input.Wrapper>
                </Table.Td>

                <Table.Td>
                  <Select
                    required
                    value={student?.address}
                    data={[
                      { value: "Riyadh", label: "الرياض" },
                      { value: "London", label: "لندن" },
                      { value: "Doha", label: "الدوحة" },
                      { value: "Cairo", label: "القاهرة" },
                      { value: "New York", label: "نيويورك" },
                    ]}
                    onChange={(val) => setStudent({ ...student, address: val })}
                  />
                </Table.Td>

                <Table.Td>
                  <Select
                    required
                    value={student?.group}
                    defaultValue={student?.group}
                    data={groups}
                    onChange={(val) => setStudent({ ...student, group: val })}
                  />
                </Table.Td>

                <Table.Td>
                  <Select
                    required
                    value={student?.paymentStatus}
                    data={[
                      { value: "Full Paid", label: "مدفوع بالكامل" },
                      { value: "Half Paid", label: "مدفوع جزئيا" },
                      { value: "Free", label: "منحة مجانية" },
                    ]}
                    onChange={(val) =>
                      setStudent({ ...student, paymentStatus: val })
                    }
                  />
                </Table.Td>
              </Table.Tr>
            </Table.Tbody>
          </Table>
          <div className="flex justify-center items-center">
            <Button className="block w-4/6 mt-8" type="submit">
              <IconUserEdit />
              حفظ التعديلات
            </Button>
          </div>
        </form>
      </Modal>
    </article>
  );
};

export default UpdateStudentModal;
